seed: 0
wandb_experiment: null
dataset_name: "hopper_velocity"

task: "hopper_flat"
epochs: 10
headless: False
save_debugging_data: False
upload_to_wandb: False
track_yaw: False
curriculum: 0

acc_max: 1.5
acc_min: -1.5
alpha_max: 2
alpha_min: -2
vel_max: 0.3
vel_min: -0.3
vel_par_max: 0.3
vel_perp_max: 0.15
vel_par_min: -0.15
vel_perp_min: -0.15
omega_max: 0.4
omega_min: -0.4
pos_max: 1e9
pos_min: -1e9

env_config:
  env:
    num_envs: 4096
#  terrain:
#    curriculum: False
  noise:
    add_noise: False
  domain_rand:
    push_robots: False
    randomize_friction: False
    randomize_base_mass: False
    randomize_inv_base_mass: False
    rigid_shape_properties:
      randomize_restitution: False
      randomize_compliance: False
      randomize_thickness: False
    dof_properties:
      randomize_stiffness: False
      randomize_damping: False
    spring_properties:
      randomize_stiffness: False
      randomize_damping: False
      randomize_setpoint: False
  init_state:
    default_dof_pos_noise_lower: [ -0., -0., -0., -0. ]  # [foot, wheel1, 2, 3]
    default_dof_pos_noise_upper: [ 0., 0., 0., 0. ]
    default_dof_vel_noise_lower: [ -0., -0., -0., -0. ]
    default_dof_vel_noise_upper: [ 0., 0., 0., 0. ]
    default_root_pos_noise_lower: [ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0 ]  # [x, y, z, qx, qy, qz, qw]
    default_root_pos_noise_upper: [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]
    default_root_vel_noise_lower: [ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0 ]  # [vx, vy, vz, wx, wy, wz]
    default_root_vel_noise_upper: [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]

trajectory_generator:
  _target_: trajopt.rom_dynamics.TrajectoryGenerator
  _partial_: True
  t_sampler:
    _target_: deep_tube_learning.utils.UniformSampleHoldDT
    t_low: 0.1
    t_high: 2
  freq_low: 0.1
  freq_high: 2
  weight_sampler:
    _target_: deep_tube_learning.utils.UniformWeightSampler
  seed: ${seed}

Kp:
  _target_: numpy.diag
  v: [2, 2, 2]

u_vel_max: 1.5
u_vel_min: -1.5
u_vel_par_max: 1.5
u_vel_perp_max: 0.75
u_vel_par_min: -0.75
u_omega_max: 1.5
u_omega_min: -1.5
u_min:
  _target_: numpy.array
  object:
    - ${u_vel_min}
    - ${u_vel_min}
    - ${u_omega_min}
u_max:
  _target_: numpy.array
  object:
    - ${u_vel_max}
    - ${u_vel_max}
    - ${u_omega_max}